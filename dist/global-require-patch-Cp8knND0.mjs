import a from"node:module";import{s as d,i as p,f as T,a as j,t as u,b as v,r as F,c as b,d as O,l as S}from"./resolve-ts-path-DUkQ8uuR.mjs";import M from"node:fs";import{p as g,t as P,a as R}from"./index-CKNv86dv.mjs";import{p as x}from"./client-Cg7nS93t.mjs";import _ from"node:path";import{fileURLToPath as A}from"node:url";import{parse as W}from"node:querystring";const D=s=>{if(!s.includes("import")&&!s.includes("export"))return!1;try{return g(s)[3]}catch{return!0}},I=[".cts",".mts",".ts",".tsx",".jsx"],N=[".js",".cjs",".mjs"],f=Object.assign(Object.create(null),a._extensions),U=f[".js"],h=(s,e)=>{x?.send&&x.send({type:"dependency",path:e});const t=I.some(o=>e.endsWith(o)),r=N.some(o=>e.endsWith(o));if(!t&&!r)return U(s,e);let n=M.readFileSync(e,"utf8");if(e.endsWith(".cjs")){const o=P(e,n);o&&(n=d()?p(o):o.code)}else if(t||D(n)){const o=R(n,e,{tsconfigRaw:T?.(e)});n=d()?p(o):o.code}s._compile(n,e)};[".js",".ts",".tsx",".jsx"].forEach(s=>{f[s]=h}),Object.defineProperty(f,".mjs",{value:h,enumerable:!1});const w=`${_.sep}node_modules${_.sep}`,m=a._resolveFilename.bind(a),y=(s,e,t,r)=>{const n=F(s);if(e?.filename&&(b.test(e.filename)||O)&&n)for(const o of n)try{return m(o,e,t,r)}catch(c){const{code:i}=c;if(i!=="MODULE_NOT_FOUND"&&i!=="ERR_PACKAGE_PATH_NOT_EXPORTED")throw c}},E=(s,e,t,r)=>{if(console.log("resolveFilename",{request:s,parent:e,isMain:t,options:r}),s.startsWith("data:")){const c=s.indexOf("?");if(c!==-1){const i=s.slice(c+1),l=W(i);console.log(l)}return s}const n=s.indexOf("?");if(n!==-1&&(s=s.slice(0,n)),s.startsWith(j)&&(s=A(s)),u&&!v(s)&&!e?.filename?.includes(w)){const c=u(s);for(const i of c){const l=y(i,e,t,r);if(l)return l;try{return m(i,e,t,r)}catch{}}}const o=y(s,e,t,r);return o||m(s,e,t,r)},L=()=>{const{sourceMapsEnabled:s}=process,{_extensions:e,_resolveFilename:t}=a;return S(process.env.TSX_TSCONFIG_PATH),process.setSourceMapsEnabled(!0),a._extensions=f,a._resolveFilename=E,()=>{s===!1&&process.setSourceMapsEnabled(!1),a._extensions=e,a._resolveFilename=t}};export{E as a,L as r};

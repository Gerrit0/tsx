import a from"node:module";import{s as p,i as u,f as b,a as j,t as h,b as g,r as S,c as M,d as O,l as R}from"./resolve-ts-path-DUkQ8uuR.mjs";import P from"node:fs";import{p as w,t as A,a as F}from"./index-DiuW-CAd.mjs";import{p as x}from"./client-Cg7nS93t.mjs";import f from"node:path";import{fileURLToPath as _}from"node:url";const U=e=>{if(!e.includes("import")&&!e.includes("export"))return!1;try{return w(e)[3]}catch{return!0}},W=[".cts",".mts",".ts",".tsx",".jsx"],D=[".js",".cjs",".mjs"],l=Object.assign(Object.create(null),a._extensions),L=l[".js"],y=(e,s)=>{x?.send&&x.send({type:"dependency",path:s});const r=W.some(n=>s.endsWith(n)),o=D.some(n=>s.endsWith(n));if(!r&&!o)return L(e,s);let t=P.readFileSync(s,"utf8");if(s.endsWith(".cjs")){const n=A(s,t);n&&(t=p()?u(n):n.code)}else if(r||U(t)){const n=F(t,s,{tsconfigRaw:b?.(s)});t=p()?u(n):n.code}e._compile(t,s)};[".js",".ts",".tsx",".jsx"].forEach(e=>{l[e]=y}),Object.defineProperty(l,".mjs",{value:y,enumerable:!1});const N=`${f.sep}node_modules${f.sep}`,m=a._resolveFilename.bind(a),E=(e,s,r,o)=>{const t=S(e);if(s?.filename&&(M.test(s.filename)||O)&&t)for(const n of t)try{return m(n,s,r,o)}catch(i){const{code:c}=i;if(c!=="MODULE_NOT_FOUND"&&c!=="ERR_PACKAGE_PATH_NOT_EXPORTED")throw i}},T=(e,s,r,o)=>{const t=e.indexOf("?");if(t!==-1&&(e=e.slice(0,t)),e.startsWith(j)&&(e=_(e)),h&&!g(e)&&!s?.filename?.includes(N)){const i=h(e);for(const c of i){const d=E(c,s,r,o);if(d)return d;try{return m(c,s,r,o)}catch{}}}const n=E(e,s,r,o);return n||m(e,s,r,o)},v=(e,s)=>{if(!s)throw new Error("The current file path (__filename or import.meta.url) must be provided in the second argument of tsx.require()");return(typeof s=="string"&&s.startsWith("file://")||s instanceof URL)&&(s=_(s)),f.resolve(f.dirname(s),e)},C=e=>{const{sourceMapsEnabled:s}=process,{_extensions:r,_resolveFilename:o}=a;R(process.env.TSX_TSCONFIG_PATH),process.setSourceMapsEnabled(!0),a._extensions=l,a._resolveFilename=T;const t=()=>{s===!1&&process.setSourceMapsEnabled(!1),a._extensions=r,a._resolveFilename=o};if(e?.namespace){const n=(i,c)=>{v(i,c)};t.require=n,t.unregister=t}return t};export{T as a,v as g,C as r};

import{r as b}from"./pkgroll_create-require-CddX1PP_.mjs";import a from"node:module";import{s as u,i as p,f as g,a as j,t as x,b as S,r as O,c as R,d as M,l as P}from"./resolve-ts-path-DUkQ8uuR.mjs";import F from"node:fs";import{p as w,t as A,a as U}from"./index-DiuW-CAd.mjs";import{p as h}from"./client-Cg7nS93t.mjs";import f from"node:path";import{fileURLToPath as _}from"node:url";const W=e=>{if(!e.includes("import")&&!e.includes("export"))return!1;try{return w(e)[3]}catch{return!0}},D=[".cts",".mts",".ts",".tsx",".jsx"],I=[".js",".cjs",".mjs"],m=Object.assign(Object.create(null),a._extensions),L=m[".js"],y=(e,s)=>{h?.send&&h.send({type:"dependency",path:s});const n=D.some(r=>s.endsWith(r)),o=I.some(r=>s.endsWith(r));if(!n&&!o)return L(e,s);let t=F.readFileSync(s,"utf8");if(s.endsWith(".cjs")){const r=A(s,t);r&&(t=u()?p(r):r.code)}else if(n||W(t)){const r=U(t,s,{tsconfigRaw:g?.(s)});t=u()?p(r):r.code}e._compile(t,s)};[".js",".ts",".tsx",".jsx"].forEach(e=>{m[e]=y}),Object.defineProperty(m,".mjs",{value:y,enumerable:!1});const N=`${f.sep}node_modules${f.sep}`,d=a._resolveFilename.bind(a),E=(e,s,n,o)=>{const t=O(e);if(s?.filename&&(R.test(s.filename)||M)&&t)for(const r of t)try{return d(r,s,n,o)}catch(i){const{code:c}=i;if(c!=="MODULE_NOT_FOUND"&&c!=="ERR_PACKAGE_PATH_NOT_EXPORTED")throw i}},C=()=>(e,s,n,o)=>{console.log({request:e,parent:s,isMain:n,options:o});const t=e.indexOf("?");if(t!==-1&&(e=e.slice(0,t)),e.startsWith(j)&&(e=_(e)),x&&!S(e)&&!s?.filename?.includes(N)){const i=x(e);for(const c of i){const l=E(c,s,n,o);if(l)return l;try{return d(c,s,n,o)}catch{}}}const r=E(e,s,n,o);return r||d(e,s,n,o)},v=C(),T=(e,s)=>{if(!s)throw new Error("The current file path (__filename or import.meta.url) must be provided in the second argument of tsx.require()");return(typeof s=="string"&&s.startsWith("file://")||s instanceof URL)&&(s=_(s)),f.resolve(f.dirname(s),e)},G=e=>{const{sourceMapsEnabled:s}=process,{_extensions:n,_resolveFilename:o}=a;P(process.env.TSX_TSCONFIG_PATH),process.setSourceMapsEnabled(!0),a._extensions=m,a._resolveFilename=v;const t=()=>{s===!1&&process.setSourceMapsEnabled(!1),a._extensions=n,a._resolveFilename=o};if(e?.namespace){const r=(i,c)=>{const l=T(i,c);return b(l)};t.require=r,t.unregister=t}return t};export{v as a,T as g,G as r};
